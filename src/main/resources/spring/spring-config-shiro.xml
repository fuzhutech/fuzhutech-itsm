<?xml version="1.0" encoding="UTF-8"?>
<beans default-lazy-init="true"
       xmlns="http://www.springframework.org/schema/beans"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                          http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

    <description>Shiro安全配置</description>

    <!--安全管理器-->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!--设置自定义Realm-->
        <property name="realm" ref="shiroDbRealm"/>
        <!--将缓存管理器，交给安全管理器-->
        <property name="cacheManager" ref="shiroEhcacheManager"/>
        <property name="sessionManager" ref="sessionManager"/>
        <!-- 记住密码管理 -->
        <property name="rememberMeManager" ref="rememberMeManager"/>
    </bean>

    <!-- 项目自定义的Realm-->
    <bean id="shiroDbRealm" class="com.fuzhutech.security.auth.shiro.realm.ShiroDbRealm">
        <!--constructor-arg index="0" name="cacheManager" ref="shiroSpringCacheManager"/>
        <constructor-arg index="1" name="matcher" ref="credentialsMatcher"/-->
        <!--启用缓存，默认 false-->
        <property name="cachingEnabled" value="true"/>
        <!-- 启用身份验证缓存，即缓存AuthenticationInfo信息，默认false -->
        <property name="authenticationCachingEnabled" value="true"/>
        <!-- 缓存AuthenticationInfo信息的缓存名称 -->
        <property name="authenticationCacheName" value="authenticationCache"/>
        <!--启用授权缓存，即缓存 AuthorizationInfo 信息，默认 false-->
        <property name="authorizationCachingEnabled" value="true"/>
        <!-- 缓存AuthorizationInfo信息的缓存名称 -->
        <property name="authorizationCacheName" value="authorizationCache"/>
        <!-- MD5加密 -->
        <property name="credentialsMatcher" ref="credentialsMatcher" />
    </bean>

    <!-- rememberMe管理器,cipherKey生成见{@code Base64Test.java} -->
    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <!-- rememberMe cookie加密的密钥 建议每个项目都不一样 默认AES算法 密钥长度（128 256 512 位）-->
        <property name="cipherKey"
                  value="#{T(org.apache.shiro.codec.Base64).decode('3AvVhmFLUs0KTA3Kprsdag==')}"/>
        <property name="cookie" ref="rememberMeCookie"/>
    </bean>

    <!-- 用户信息记住我功能的相关配置 -->
    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <!--cookie的name，我故意取名叫xxxxbaidu -->
        <constructor-arg value="v_v-re-baidu"/>
        <property name="httpOnly" value="true"/>
        <!-- 配置存储rememberMe Cookie的domain为 一级域名
        <property name="domain" value=".itboy.net"/>
         -->
        <!-- 7天,采用spring el计算方便修改-->
        <property name="maxAge" value="#{7 * 24 * 60 * 60}"/>
    </bean>

    <!-- Shiro Filter -->
    <bean id="shiroFilter" class="com.fuzhutech.security.auth.shiro.spring.web.ShiroFilterFactoryBean">
        <!-- 安全管理器 -->
        <property name="securityManager" ref="securityManager"/>
        <!--property name="loginUrl" value="/login"/-->
        <property name="successUrl" value="/index"/>
        <property name="unauthorizedUrl" value="/unauth"/>
        <property name="customFilterChainEnabled" value="false"/>
        <property name="filterChainDefinitions">
            <value>
                /captcha.jpg = anon
                /commons/** = anon
                /static/** = anon
                /webhooks = user
                /api/users1 = authc
                /login = authc
            </value>
        </property>
        <property name="filters">
            <map>
                <entry key="rest">
                    <bean class="com.fuzhutech.security.auth.shiro.filter.HttpMethodPermissionFilter"/>
                </entry>
                <entry key="role">
                    <bean class="com.fuzhutech.security.auth.shiro.filter.RoleAuthorizationFilter"/>
                </entry>
                <entry key="authc">
                    <bean class="com.fuzhutech.security.auth.shiro.filter.FormAuthenticationFilter"/>
                </entry>
                <entry key="perms">
                    <bean class="com.fuzhutech.security.auth.shiro.filter.PermissionsAuthorizationFilter"/>
                </entry>
                <entry key="kickout" value-ref="kickoutSessionControlFilter"/>
            </map>
        </property>
    </bean>

    <bean id="kickoutSessionControlFilter" class="com.fuzhutech.security.auth.shiro.filter.KickoutSessionControlFilter">
        <property name="cacheManager" ref="shiroEhcacheManager"/>
        <property name="sessionManager" ref="sessionManager"/>
        <!-- 是否踢出后来登录的，默认是false；即后者登录的用户踢出前者登录的用户 -->
        <property name="kickoutAfter" value="false"/>
        <!-- 同一个用户最大的会话数，默认1；比如2的意思是同一个用户允许最多同时两个人登录 -->
        <property name="maxSession" value="1"/>
        <property name="kickoutUrl" value="/login.action"/>
    </bean>

    <!-- 用户授权信息Cache, 采用EhCache-->
    <bean id="shiroEhcacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:spring/ehcache-shiro.xml"/>
    </bean>


    <!-- 会话ID生成器 -->
    <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>

    <!-- 会话Cookie模板，使用sid存储sessionid -->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="sid"/>
        <property name="httpOnly" value="true"/>
        <!--浏览器关闭时失效此Cookie-->
        <property name="maxAge" value="-1"/>
        <!--设置Cookie名字，默认为JSESSIONID,2个web模块，分别设置不同的sessionIdCookie的name-->
        <property name="name" value="WEBSID"/>
    </bean>

    <!-- 会话DAO 用于会话的CRUD -->
    <!-- Session缓存名字，默认就是shiro-activeSessionCache -->
    <bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
        <property name="activeSessionsCacheName" value="shiro-activeSessionCache"/>
        <property name="sessionIdGenerator" ref="sessionIdGenerator"/>
        <property name="cacheManager" ref="shiroEhcacheManager"/>
    </bean>

    <!-- 会话验证调度器 -->
    <bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler">
        <property name="sessionValidationInterval" value="1800000"/>
        <property name="sessionManager" ref="sessionManager"/>
    </bean>

    <bean id="sessionValidationScheduler1" class="org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler">
        <property name="interval" value="1800000"/>
    </bean>

    <!-- 会话管理器 -->
    <!--bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager"-->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <!-- 设置全局会话超时时间 半小时 -->
        <!--globalSessionTimeout是会话存活时间(默认是30分钟)-->
        <property name="globalSessionTimeout" value="#{30 * 60 * 1000}"/>

        <!-- url上带sessionId 默认为true -->
        <!--property name="sessionIdUrlRewritingEnabled" value="false"/-->
        <!--sessionDao是进行会话读写的实现-->
        <property name="sessionDAO" ref="sessionDAO"/>
        <property name="sessionIdCookieEnabled" value="true"/>
        <!-- 会话Cookie模板 -->
        <property name="sessionIdCookie" ref="sessionIdCookie"/>

        <!--是否开启检测，扫描session线程,负责清理超时会话,默认开启-->
        <property name="sessionValidationSchedulerEnabled" value="true" />

        <!-- 是否删除无效的，默认也是开启 -->
        <!--property name="deleteInvalidSessions" value="true"/-->
        <!-- 相隔多久检查一次session的有效性   -->
        <property name="sessionValidationInterval" value="1800000"/>
        <property name="sessionValidationScheduler" ref="sessionValidationScheduler1"/>

        <!-- session 监听，可以多个。 -->
        <property name="sessionListeners">
            <list>
                <ref bean="customSessionListener"/>
            </list>
        </property>
    </bean>

    <!-- custom shiro session listener -->
    <bean id="customSessionListener" class="com.fuzhutech.security.auth.shiro.session.CustomSessionListener">

    </bean>

    <!-- 在方法中 注入  securityManager ，进行代理控制 -->
    <!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>

    <!-- 密码错误5次锁定半小时 -->
    <bean id="credentialsMatcher" class="com.fuzhutech.security.auth.shiro.credential.RetryLimitCredentialsMatcher">
        <!--constructor-arg ref="shiroSpringCacheManager"/-->
        <constructor-arg ref="shiroEhcacheManager"/>
        <property name="retryLimitCacheName" value="passwordRetryCache"/>
        <!--storedCredentialsHexEncoded默认是true，此时用的是密码加密用的是Hex编码；false时用Base64编码-->
        <property name="storedCredentialsHexEncoded" value="false"/>
        <!--hashAlgorithmName必须的，没有默认值,可以有MD5或者SHA-1-->
        <property name="hashAlgorithmName" value="MD5" />
        <!--hashIterations迭代次数，默认值是1-->
        <property name="hashIterations" value="1" />
    </bean>

    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
    <!--bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/-->

    <!-- 开启Shiro注解 -->
    <!--bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean-->

</beans>